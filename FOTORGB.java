/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package latihan2;
/////////////////////////
//implementasi kode tambahan:(selesai)
//http://codeswillrevealed.blogspot.com/2017/02/how-to-make-simple-photo-editor-using.html
/////////////////////////

import java.io.File;
import java.io.IOException;
import javax.imageio.ImageIO;
import java.awt.image.BufferedImage;
import javax.swing.ImageIcon;
import javax.swing.*;
import java.awt.*;
import java.awt.image.BufferedImageOp;
import java.awt.image.ConvolveOp;
import java.awt.image.Kernel;
import javax.swing.filechooser.FileNameExtensionFilter;

//import org.apache.commons.codec.binary.Base64;
/**
 *
 * @author user
 */
public class FOTORGB extends javax.swing.JFrame {
    //daftar variabel utama
private BufferedImage OriginalBi = null;
private BufferedImage NewBi = getImage("C:\\blank.png");
private String Mpath;
private final ImageIcon blank = new ImageIcon(getImage("C:\\blank.png"));
private int[][] pixel;

    private BufferedImage getImage(String Mpath) {
        try {
            return ImageIO.read(new File(
                Mpath));
        } catch (IOException e) {
            e.printStackTrace(System.err);
        }
        return null;
    }
    

    /**
     * Creates new form FOTORGB
     */
    public FOTORGB() { 
        initComponents();
        jLabel1.setIcon(ResizeImage(blank));
     
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
//    @SuppressWarnings("unchecked")
    //Front-end
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jLabel1 = new javax.swing.JLabel();
        RED = new javax.swing.JButton();
        GREEN = new javax.swing.JButton();
        BLUE = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        Original = new javax.swing.JButton();
        GayScale = new javax.swing.JButton();
        sharpening = new javax.swing.JButton();
        blurring = new javax.swing.JButton();
        condition = new javax.swing.JLabel();
        histo_button = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        File = new javax.swing.JMenu();
        New = new javax.swing.JMenuItem();
        SaveAs = new javax.swing.JMenuItem();
        Edit = new javax.swing.JMenu();
        Sharpen = new javax.swing.JMenuItem();
        Purple = new javax.swing.JMenuItem();
        Lomo = new javax.swing.JMenuItem();
        Sephia = new javax.swing.JMenuItem();
        Lumia = new javax.swing.JMenuItem();
        Darken = new javax.swing.JMenuItem();
        Monoton = new javax.swing.JMenuItem();

        jMenuItem1.setText("jMenuItem1");

        jMenuItem2.setText("jMenuItem2");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Foto Editor");
        setForeground(java.awt.Color.orange);

        jLabel1.setText("                                              gambar");
        jLabel1.setBorder(new javax.swing.border.MatteBorder(null));

        RED.setText("RED");
        RED.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                REDActionPerformed(evt);
            }
        });

        GREEN.setText("GREEN");
        GREEN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GREENActionPerformed(evt);
            }
        });

        BLUE.setText("BLUE");
        BLUE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BLUEActionPerformed(evt);
            }
        });

        jLabel2.setText("...........");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel3.setText("Alamat :");

        Original.setText("Original");
        Original.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OriginalActionPerformed(evt);
            }
        });

        GayScale.setText("GrayScale");
        GayScale.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GayScaleActionPerformed(evt);
            }
        });

        sharpening.setText("Sharpening");
        sharpening.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sharpeningActionPerformed(evt);
            }
        });

        blurring.setText("Blurring");
        blurring.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                blurringActionPerformed(evt);
            }
        });

        condition.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        condition.setText("condition");

        histo_button.setText("Histogram");
        histo_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                histo_buttonActionPerformed(evt);
            }
        });

        File.setText("File");

        New.setText("New");
        New.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NewActionPerformed(evt);
            }
        });
        File.add(New);

        SaveAs.setText("SaveAs");
        SaveAs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveAsActionPerformed(evt);
            }
        });
        File.add(SaveAs);

        jMenuBar1.add(File);

        Edit.setText("AdvEffect");

        Sharpen.setText("Sharpen");
        Sharpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SharpenActionPerformed(evt);
            }
        });
        Edit.add(Sharpen);

        Purple.setText("Purple");
        Purple.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PurpleActionPerformed(evt);
            }
        });
        Edit.add(Purple);

        Lomo.setText("Lomo");
        Lomo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LomoActionPerformed(evt);
            }
        });
        Edit.add(Lomo);

        Sephia.setText("Sephia");
        Sephia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SephiaActionPerformed(evt);
            }
        });
        Edit.add(Sephia);

        Lumia.setText("Lumia");
        Lumia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LumiaActionPerformed(evt);
            }
        });
        Edit.add(Lumia);

        Darken.setText("Darken");
        Darken.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DarkenActionPerformed(evt);
            }
        });
        Edit.add(Darken);

        Monoton.setText("Monoton");
        Monoton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MonotonActionPerformed(evt);
            }
        });
        Edit.add(Monoton);

        jMenuBar1.add(Edit);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(74, 74, 74)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 351, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(condition, javax.swing.GroupLayout.PREFERRED_SIZE, 433, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 515, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(40, 40, 40)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(BLUE, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(RED, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(17, 17, 17)
                                                .addComponent(GayScale, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(Original, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                    .addComponent(GREEN, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(sharpening)
                                        .addGap(18, 18, 18)
                                        .addComponent(blurring))))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(78, 78, 78)
                                .addComponent(histo_button)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel3))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(76, 76, 76)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(BLUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(GREEN)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(RED))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(24, 24, 24)
                                .addComponent(GayScale)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(Original)))
                        .addGap(55, 55, 55)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(sharpening)
                            .addComponent(blurring))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(histo_button))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 345, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(53, 53, 53)
                .addComponent(condition)
                .addGap(51, 51, 51))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
   //Main button
    private void REDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_REDActionPerformed
        // TODO add your handling code here:
        BufferedImage gmb = null;
        gmb = getImage(Mpath);
        
        if(gmb == null){
            condition.setText("Tidak ada gambar");
        throw new NullPointerException("Belum ada gambar");}
        
        
        int width = gmb.getWidth();
        int Height = gmb.getHeight();

        for (int y = 0; y < Height; y++)
        {
            for  (int x = 0; x < width; x++)
            {
		int p = gmb.getRGB(x,y);
                
		int a = (p>>24)&0xff; //b
		int b = (p>>8)&0xff; //g
		int g =  p&0xff;  //r

		p = (a<<24) | (b<<16) | (0<<8) | 0;

		gmb.setRGB(x, y, p);	
	}
}
        NewBi = gmb;
        ImageIcon imageicon = new ImageIcon(gmb);
        
     //   gambar = new JLabel1(imageicon);
        jLabel1.setIcon(ResizeImage(imageicon));
    }//GEN-LAST:event_REDActionPerformed

    private void GREENActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GREENActionPerformed
        // TODO add your handling code here:
        
        BufferedImage gmb = null;
        gmb = getImage(Mpath);
        
        if(gmb == null){
            condition.setText("Tidak ada gambar");
        throw new NullPointerException("Belum ada gambar");}
        
        
        int width = gmb.getWidth();
        int Height = gmb.getHeight();

        for (int y = 0; y < Height; y++)
        {
            for  (int x = 0; x < width; x++)
            {
		int p = gmb.getRGB(x,y);
		
		int a = (p>>24)&0xff;//b
		int b =  p&0xff;      //g
		int g = (p>>8)&0xff; //r

		p = (a<<24) | (0<<16) | (g<<8) | 0;

		gmb.setRGB(x, y, p);	
	}
}
        NewBi = gmb;
        ImageIcon imageicon = new ImageIcon(gmb);

        jLabel1.setIcon(ResizeImage(imageicon));
    }//GEN-LAST:event_GREENActionPerformed

    private void BLUEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BLUEActionPerformed
        // TODO add your handling code here:
        BufferedImage gmb = null;
        gmb = getImage(Mpath);
        
        if(gmb == null){
            condition.setText("Tidak ada gambar");
        throw new NullPointerException("Belum ada gambar");}
        
        
        int width = gmb.getWidth();
        int Height = gmb.getHeight();

        for (int y = 0; y < Height; y++)
        {
            for  (int x = 0; x < width; x++)
            {
		int p = gmb.getRGB(x,y);
		
		int a = (p>>0)&0xff;       //b
		int b = (p>>0)&0xff;  //g
		int g = (p>>0)&0xff;   //r

		p = (a<<0) | (b<<0) | (g<<0) | 0;

		gmb.setRGB(x, y, p);	
	}
}
        NewBi = gmb;
        ImageIcon imageicon = new ImageIcon(gmb);

     //   gambar = new JLabel1(imageicon);
        jLabel1.setIcon(ResizeImage(imageicon));
    }//GEN-LAST:event_BLUEActionPerformed
    
    private void OriginalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OriginalActionPerformed
        
        if(null != OriginalBi){
        NewBi = OriginalBi;
        ImageIcon imageicon = new ImageIcon(OriginalBi);
        
        
    jLabel1.setIcon(ResizeImage(imageicon));
        }
        else{
            condition.setText("Tidak ada gambar");
        System.out.println("THERE'S NO PICTURE \n"
                    + "=================== \n" );
        }
    }//GEN-LAST:event_OriginalActionPerformed

    private void GayScaleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GayScaleActionPerformed
        // TODO add your handling code here:
        BufferedImage gmb = null;
        gmb = getImage(Mpath);
        
        if(gmb == null){
            condition.setText("Tidak ada gambar");
        throw new NullPointerException("Belum ada gambar");}
        
        
        int width = gmb.getWidth();
        int Height = gmb.getHeight();

        for (int y = 0; y < Height; y++)
        {
            for  (int x = 0; x < width; x++)
            {
		int p = gmb.getRGB(x,y);
		
		int a = (p>>24)&0xff;       //b
		int r = (p>>16)&0xff;  //g
		int g = (p>>8)&0xff;   //r
                int b = p&0xff;

		int avg = (r + g + b) / 3;
                
                p = (avg<<24) | (avg<<16) | (avg<<8) | avg;
                        
		gmb.setRGB(x, y, p);	
	}
}
        NewBi = gmb;
        ImageIcon imageicon = new ImageIcon(gmb);

        jLabel1.setIcon(ResizeImage(imageicon));
    }//GEN-LAST:event_GayScaleActionPerformed

    private void sharpeningActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sharpeningActionPerformed
        // TODO add your handling code here:ERROR
        if(OriginalBi != null){
        BufferedImage image = NewBi;
        
        if(image == null){
            condition.setText("Tidak ada gambar");
        throw new NullPointerException("Belum ada gambar");}
        
        // A 3x3 kernel that sharpens an image
        Kernel kernel = new Kernel(3, 3,
                new float[]{
                    -1, -1, -1,
                    -1, 9, -1,
                    -1, -1, -1});
 
        BufferedImageOp op = new ConvolveOp(kernel);
        image = op.filter(image, null);
        NewBi = image;
        ImageIcon imageicon = new ImageIcon(image);

        jLabel1.setIcon(ResizeImage(imageicon));
        }
        else{
             condition.setText("Tidak ada gambar");
        throw new NullPointerException("Belum ada gambar");
        }
    }//GEN-LAST:event_sharpeningActionPerformed

    private void histo_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_histo_buttonActionPerformed
        // TODO add your handling code here: 
        Histogram histogram = new Histogram();
        histogram.display(NewBi);
        
    }//GEN-LAST:event_histo_buttonActionPerformed

    private void blurringActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_blurringActionPerformed
        // TODO add your handling code here:
        if(OriginalBi != null){
    BufferedImage image = NewBi;
    
    if(image == null){
        condition.setText("Tidak ada gambar");
        throw new NullPointerException("Belum ada gambar");}
        
        // A 3x3 kernel that blur an image
        Kernel kernel = new Kernel(3, 3,
                new float[]{
                    1f/4f, 1f/16f, 1f/4f,
                    1f/16f, 1f/16f, 1f/16f,
                    1f/16f, 1f/8f, 1f/16f});
 
        BufferedImageOp op = new ConvolveOp(kernel);
        image = op.filter(image, null);
        NewBi = image;
        ImageIcon imageicon = new ImageIcon(image);

        jLabel1.setIcon(ResizeImage(imageicon));      
        }
        else{
             condition.setText("Tidak ada gambar");
        throw new NullPointerException("Belum ada gambar");
        }
    }//GEN-LAST:event_blurringActionPerformed

    private void SaveAsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveAsActionPerformed
        // TODO add your handling code here:
               // TODO add your handling code here:
        if( null != NewBi){
        imageToArray();
        saveFile();
        }
        else{
            condition.setText("Tidak ada gambar untuk di save");
        System.out.println("THERE'S NOTHING TO SAVE!");
        }
        
    }//GEN-LAST:event_SaveAsActionPerformed

    private void NewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NewActionPerformed
        // TODO add your handling code here:
        JFileChooser file = new JFileChooser();
    file.setCurrentDirectory(new File(System.getProperty("user.home")));
    //filter the files
    FileNameExtensionFilter filter = new FileNameExtensionFilter("*.Images", "jpg","gif","png");
    file.addChoosableFileFilter(filter);
    int result = file.showOpenDialog(null);
    //if the user click on save in Jfilechooser
    if(result == JFileChooser.APPROVE_OPTION){
    File selectedFile = file.getSelectedFile();
    String path = selectedFile.getAbsolutePath();
    Mpath = path;
    jLabel2.setText(path);
    ImageIcon images = new ImageIcon(path);
    jLabel1.setIcon(ResizeImage(images));
    try{
    File  fl = new File(path);
    condition.setText("  ");
    OriginalBi = ImageIO.read(fl);
    NewBi = ImageIO.read(fl);
    }
    catch(IOException e){
            System.out.println("THERE'S A PROMBLEM \n"
                    + "=================== \n" + e);
        }
    }
    else if(result == JFileChooser.CANCEL_OPTION){
    System.out.println("No File Select");
    }                                      
    

    }//GEN-LAST:event_NewActionPerformed
/////////////////////////////TAMBAHAN///////////////////////////
    private void SharpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SharpenActionPerformed
        // TODO add your handling code here:
        BufferedImage gmb = null;
        gmb = getImage(Mpath);
        
        if(gmb == null){
            condition.setText("Tidak ada gambar");
        throw new NullPointerException("Belum ada gambar");}
        
        int width = gmb.getWidth();
        int Height = gmb.getHeight();
        
        Color tWarna = null;
        for (int y = 0; y < Height; y++)
        {
            for  (int x = 0; x < width; x++)
            {   
                int p = gmb.getRGB(x,y);
		tWarna = new Color(p);
                
		int red = tWarna.getRed();       //b
		int green = tWarna.getGreen();  //g
		int blue = tWarna.getBlue();   //r

		tWarna = new Color(0,green,blue);

		gmb.setRGB(x, y, tWarna.getRGB());	                
            }
            }
        
        NewBi = gmb;
        ImageIcon imageicon = new ImageIcon(gmb);

     //   gambar = new JLabel1(imageicon);
        jLabel1.setIcon(ResizeImage(imageicon));
    }//GEN-LAST:event_SharpenActionPerformed

    private void PurpleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PurpleActionPerformed
        // TODO add your handling code here:
        BufferedImage gmb = null;
        gmb = getImage(Mpath);
        
        if(gmb == null){
            condition.setText("Tidak ada gambar");
        throw new NullPointerException("Belum ada gambar");}
        
        int width = gmb.getWidth();
        int Height = gmb.getHeight();
        
        Color tWarna = null;
        for (int y = 0; y < Height; y++)
        {
            for  (int x = 0; x < width; x++)
            {   
                int p = gmb.getRGB(x,y);
		tWarna = new Color(p);
                
		int red = tWarna.getRed();       //b
		int green = tWarna.getGreen();  //g
		int blue = tWarna.getBlue();   //r

		tWarna = new Color(red,0,blue);

		gmb.setRGB(x, y, tWarna.getRGB());	                
            }
            }
        
        NewBi = gmb;
        ImageIcon imageicon = new ImageIcon(gmb);

     //   gambar = new JLabel1(imageicon);
        jLabel1.setIcon(ResizeImage(imageicon));
    }//GEN-LAST:event_PurpleActionPerformed

    private void LomoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LomoActionPerformed
        // TODO add your handling code here:
        BufferedImage gmb = null;
        gmb = getImage(Mpath);
        
        if(gmb == null){
            condition.setText("Tidak ada gambar");
        throw new NullPointerException("Belum ada gambar");}        
        
        int width = gmb.getWidth();
        int Height = gmb.getHeight();
        
        Color tWarna = null;
        for (int y = 0; y < Height; y++)
        {
            for  (int x = 0; x < width; x++)
            {   
                int p = gmb.getRGB(x,y);
		tWarna = new Color(p);
                
		int red = tWarna.getRed();       //r
		int green = tWarna.getGreen();  //g
		int blue = tWarna.getBlue();   //b
                int black = (red + green + blue) / 45;

		tWarna = new Color(black,black,black);

		gmb.setRGB(x, y, tWarna.getRGB());	                
            }
            }
        
        NewBi = gmb;
        ImageIcon imageicon = new ImageIcon(gmb);

     //   gambar = new JLabel1(imageicon);
        jLabel1.setIcon(ResizeImage(imageicon));
    }//GEN-LAST:event_LomoActionPerformed

    private void SephiaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SephiaActionPerformed
        // TODO add your handling code here:
        BufferedImage gmb = null;
        gmb = getImage(Mpath);
        
        if(gmb == null){
            condition.setText("Tidak ada gambar");
        throw new NullPointerException("Belum ada gambar");}
        
        
        int width = gmb.getWidth();
        int Height = gmb.getHeight();
        
        Color tWarna = null;
        for (int y = 0; y < Height; y++)
        {
            for  (int x = 0; x < width; x++)
            {   
                int p = gmb.getRGB(x,y);
		tWarna = new Color(p);
                
		int red = tWarna.getRed();       //b
		int green = tWarna.getGreen();  //g
		int blue = tWarna.getBlue();   //r

		tWarna = new Color(red / 2 ,green / 3 ,blue / 4);

		gmb.setRGB(x, y, tWarna.getRGB());	                
            }
            }
        
        NewBi = gmb;
        ImageIcon imageicon = new ImageIcon(gmb);

     //   gambar = new JLabel1(imageicon);
        jLabel1.setIcon(ResizeImage(imageicon));
    }//GEN-LAST:event_SephiaActionPerformed

    private void LumiaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LumiaActionPerformed
        // TODO add your handling code here:
        BufferedImage gmb = null;
        gmb = getImage(Mpath);
        
        if(gmb == null){
            condition.setText("Tidak ada gambar");
        throw new NullPointerException("Belum ada gambar");}
        
        
        int width = gmb.getWidth();
        int Height = gmb.getHeight();
        
        Color tWarna = null;
        for (int y = 0; y < Height; y++)
        {
            for  (int x = 0; x < width; x++)
            {   
                int p = gmb.getRGB(x,y);
		tWarna = new Color(p);
                
		int red = tWarna.getRed();       //b
		int green = tWarna.getGreen();  //g
		int blue = tWarna.getBlue();   //r

		tWarna = new Color(red,green,0);

		gmb.setRGB(x, y, tWarna.getRGB());	                
            }
            }
        
        NewBi = gmb;
        ImageIcon imageicon = new ImageIcon(gmb);

     //   gambar = new JLabel1(imageicon);
        jLabel1.setIcon(ResizeImage(imageicon));
    }//GEN-LAST:event_LumiaActionPerformed

    private void DarkenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DarkenActionPerformed
        // TODO add your handling code here:
        BufferedImage gmb = null;
        gmb = getImage(Mpath);
        
        if(gmb == null){
            condition.setText("Tidak ada gambar");
        throw new NullPointerException("Belum ada gambar");
        }
        
        
        int width = gmb.getWidth();
        int Height = gmb.getHeight();
        
        Color tWarna = null;
        for (int y = 0; y < Height; y++)
        {
            for  (int x = 0; x < width; x++)
            {   
                int p = gmb.getRGB(x,y);
		tWarna = new Color(p);
                
		int red = tWarna.getRed();       //b
		int green = tWarna.getGreen();  //g
		int blue = tWarna.getBlue();   //r

		tWarna = new Color(red / 4 ,green / 3 ,blue / 2 );

		gmb.setRGB(x, y, tWarna.getRGB());	                
            }
            }
        
        NewBi = gmb;
        ImageIcon imageicon = new ImageIcon(gmb);

     //   gambar = new JLabel1(imageicon);
        jLabel1.setIcon(ResizeImage(imageicon));
    }//GEN-LAST:event_DarkenActionPerformed

    private void MonotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MonotonActionPerformed
        // TODO add your handling code here:
        BufferedImage gmb = null;
        gmb = getImage(Mpath);
        
        if(gmb == null){
            condition.setText("Tidak ada gambar");
        throw new NullPointerException("Belum ada gambar");
        }
        
        
        int width = gmb.getWidth();
        int Height = gmb.getHeight();
        
        Color tWarna = null;
        for (int y = 0; y < Height; y++)
        {
            for  (int x = 0; x < width; x++)
            {   
                int p = gmb.getRGB(x,y);
		tWarna = new Color(p);
                
		int red = tWarna.getRed();       //b
		int green = tWarna.getGreen();  //g
		int blue = tWarna.getBlue();   //r
                
                int gray = (red + green + blue) / 3;
                if(gray <= 128){
                    gray = 0;
                } else{
                gray = 255;
                }

		tWarna = new Color(gray,gray,gray);

		gmb.setRGB(x, y, tWarna.getRGB());	                
            }
            }
        
        NewBi = gmb;
        ImageIcon imageicon = new ImageIcon(gmb);

     //   gambar = new JLabel1(imageicon);
        jLabel1.setIcon(ResizeImage(imageicon));
    }//GEN-LAST:event_MonotonActionPerformed
    
 ////////////////Utility-Class//////////////////////   
    private void imageToArray(){
        
        BufferedImage gmb = NewBi;
        
        int width = gmb.getWidth();
        int Height = gmb.getHeight();
        pixel = new int[width][Height];
        
        for(int i = 0; i < width; i++){
            for(int j = 0; j < Height; j++){
                pixel[i][j]=gmb.getRGB(i, j);
            }
        }
    }
    
    private void saveFile(){
       
           JFileChooser file = new JFileChooser();
    file.setCurrentDirectory(new File(System.getProperty("user.home")));
    //filter the files
    FileNameExtensionFilter filter = new FileNameExtensionFilter("*.Images", "jpg","gif","png");
    file.addChoosableFileFilter(filter);
    int result = file.showSaveDialog(null);
    //if the user click on save in Jfilechooser
    if(result == JFileChooser.APPROVE_OPTION){
        try{
        ImageIO.write(NewBi,"png",file.getSelectedFile());
    condition.setText("Image has been saved");
    System.out.println("success to save image file");
    }
        catch(IOException ioe){
        System.out.println("failed to save image file");
        }
    }
    else if(result == JFileChooser.CANCEL_OPTION){
    System.out.println("No File Select");
    }
    }
   
    /**
     *
     * @param MyImage
     * @return
     */
    public ImageIcon ResizeImage(ImageIcon MyImage){
        
//ImageIcon MyImage = new ImageIcon(ImagePath);
Image img = MyImage.getImage();
Image newImg = img.getScaledInstance(jLabel1.getWidth(), jLabel1.getHeight(), Image.SCALE_SMOOTH);
ImageIcon image = new ImageIcon(newImg);
return image;
}
 ///////////////////////////////////////////////
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FOTORGB.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FOTORGB.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FOTORGB.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FOTORGB.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FOTORGB().setVisible(true);
            }
        });
    }    
   

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BLUE;
    private javax.swing.JMenuItem Darken;
    private javax.swing.JMenu Edit;
    private javax.swing.JMenu File;
    private javax.swing.JButton GREEN;
    private javax.swing.JButton GayScale;
    private javax.swing.JMenuItem Lomo;
    private javax.swing.JMenuItem Lumia;
    private javax.swing.JMenuItem Monoton;
    private javax.swing.JMenuItem New;
    private javax.swing.JButton Original;
    private javax.swing.JMenuItem Purple;
    private javax.swing.JButton RED;
    private javax.swing.JMenuItem SaveAs;
    private javax.swing.JMenuItem Sephia;
    private javax.swing.JMenuItem Sharpen;
    private javax.swing.JButton blurring;
    private javax.swing.JLabel condition;
    private javax.swing.JButton histo_button;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JButton sharpening;
    // End of variables declaration//GEN-END:variables
}


