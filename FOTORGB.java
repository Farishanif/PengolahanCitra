/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package latihan2;
/////////////////////////
//implementasi kode kedepan:
//http://codeswillrevealed.blogspot.com/2017/02/how-to-make-simple-photo-editor-using.html
/////////////////////////
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.EventQueue;
import java.awt.Paint;
import java.awt.event.ActionEvent;
import java.awt.image.BufferedImage;
import java.awt.image.Raster;
import java.io.File;
import java.io.IOException;
import javax.imageio.ImageIO;
import javax.swing.AbstractAction;
import javax.swing.ImageIcon;
import javax.swing.JCheckBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
/////////////////////////
import java.awt.Image.*;
import java.awt.image.BufferedImage;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.imageio.*;
import java.io.*;
import javax.swing.*;
import java.awt.*;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.geom.AffineTransform;
import java.awt.image.AffineTransformOp;
import java.awt.image.BufferedImageOp;
import java.awt.image.ConvolveOp;

import java.awt.image.ImageObserver;
import static java.awt.image.ImageObserver.ALLBITS;
import java.awt.image.Kernel;
import java.util.stream.IntStream;
import javafx.scene.effect.GaussianBlur;
import javafx.scene.image.ImageView;
import static javax.swing.Action.NAME;
import static javax.swing.Action.SELECTED_KEY;
import javax.swing.filechooser.FileNameExtensionFilter;
import static latihan2.Sharpening.image;
import static latihan2.Sharpening.imageLoaded;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.DefaultDrawingSupplier;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.xy.StandardXYBarPainter;
import org.jfree.chart.renderer.xy.XYBarRenderer;
import org.jfree.data.statistics.HistogramDataset;

//import org.apache.commons.codec.binary.Base64;
/**
 *
 * @author user
 */
public class FOTORGB extends javax.swing.JFrame {
    //daftar variabel umum
private BufferedImage OriginalBi;
private BufferedImage NewBi = getImage();
private int[][] pixel;
private HistogramDataset dataset;
private XYBarRenderer renderer;
private static final int BINS = 256;
int[] filter = {1, 8, 1, 8, 16, 8, 1, 8, 1};
int filterWidth = 3;

    private BufferedImage getImage() {
        try {
            return ImageIO.read(new File(
                "C:\\blank.png"));
        } catch (IOException e) {
            e.printStackTrace(System.err);
        }
        return null;
    }
    

    /**
     * Creates new form FOTORGB
     */
    public FOTORGB() { 
        initComponents();
        
     
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jLabel1 = new javax.swing.JLabel();
        RED = new javax.swing.JButton();
        GREEN = new javax.swing.JButton();
        BLUE = new javax.swing.JButton();
        upload = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        f = new javax.swing.JButton();
        Original = new javax.swing.JButton();
        GayScale = new javax.swing.JButton();
        sharpen = new javax.swing.JButton();
        blurring = new javax.swing.JButton();
        condition = new javax.swing.JLabel();
        histo_button = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        Save = new javax.swing.JMenu();
        New = new javax.swing.JMenuItem();
        SaveAs = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem4 = new javax.swing.JMenuItem();

        jMenuItem1.setText("jMenuItem1");

        jMenuItem2.setText("jMenuItem2");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Foto RGB Boi....");
        setForeground(java.awt.Color.orange);

        jLabel1.setText("                                              gambar");
        jLabel1.setBorder(new javax.swing.border.MatteBorder(null));

        RED.setText("RED");
        RED.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                REDActionPerformed(evt);
            }
        });

        GREEN.setText("GREEN");
        GREEN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GREENActionPerformed(evt);
            }
        });

        BLUE.setText("BLUE");
        BLUE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BLUEActionPerformed(evt);
            }
        });

        upload.setText("Upload");
        upload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uploadActionPerformed(evt);
            }
        });

        jLabel2.setText("...........");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel3.setText("Alamat :");

        f.setText("Save");
        f.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fActionPerformed(evt);
            }
        });

        Original.setText("Original");
        Original.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OriginalActionPerformed(evt);
            }
        });

        GayScale.setText("GrayScale");
        GayScale.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GayScaleActionPerformed(evt);
            }
        });

        sharpen.setText("Sharpen");
        sharpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sharpenActionPerformed(evt);
            }
        });

        blurring.setText("Blurring");
        blurring.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                blurringActionPerformed(evt);
            }
        });

        condition.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        condition.setText("condition");

        histo_button.setText("Histogram");
        histo_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                histo_buttonActionPerformed(evt);
            }
        });

        Save.setText("File");

        New.setText("New");
        New.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NewActionPerformed(evt);
            }
        });
        Save.add(New);

        SaveAs.setText("SaveAs");
        SaveAs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveAsActionPerformed(evt);
            }
        });
        Save.add(SaveAs);

        jMenuBar1.add(Save);

        jMenu2.setText("Edit");

        jMenuItem4.setText("advanced");
        jMenu2.add(jMenuItem4);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(74, 74, 74)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 351, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(15, 15, 15)
                                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 515, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(135, 135, 135)
                                        .addComponent(histo_button)))
                                .addGap(38, 38, 38)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(BLUE, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(GREEN)
                                            .addComponent(RED, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(34, 34, 34)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(GayScale, javax.swing.GroupLayout.DEFAULT_SIZE, 112, Short.MAX_VALUE)
                                            .addComponent(Original, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(8, 8, 8)
                                                .addComponent(upload))
                                            .addComponent(sharpen))
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(36, 36, 36)
                                                .addComponent(blurring))
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(18, 18, 18)
                                                .addComponent(f, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE))))))))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(condition, javax.swing.GroupLayout.PREFERRED_SIZE, 485, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(23, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel3))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(BLUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(GREEN)
                        .addGap(18, 18, 18)
                        .addComponent(RED)
                        .addGap(52, 52, 52)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(blurring)
                            .addComponent(sharpen)))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 345, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(53, 53, 53)
                        .addComponent(GayScale)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(Original)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(upload)
                            .addComponent(f))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(histo_button)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(condition)
                        .addGap(50, 50, 50))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void REDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_REDActionPerformed
        // TODO add your handling code here:
        BufferedImage gmb = null;
        File f = null;
        String Mpath = jLabel2.getText();
        try
        {
        f = new File(Mpath);
        gmb = ImageIO.read(f);
        }
        catch(IOException e){
            condition.setText("Tidak ada gambar");
            System.out.println("THERE'S NO PICTURE \n"
                    + "=================== \n" );
        }
        
        int width = gmb.getWidth();
        int Height = gmb.getHeight();

        for (int y = 0; y < Height; y++)
        {
            for  (int x = 0; x < width; x++)
            {
		int p = gmb.getRGB(x,y);
		
		int a = (p>>24)&0xff; //b
		int b = (p>>8)&0xff; //g
		int g =  p&0xff;  //r
                

		p = (a<<24) | (b<<16) | (0<<8) | 0;

		gmb.setRGB(x, y, p);	
	}
}
        NewBi = gmb;
        ImageIcon imageicon = new ImageIcon(gmb);
        
     //   gambar = new JLabel1(imageicon);
        jLabel1.setIcon(ResizeImage(imageicon));
    }//GEN-LAST:event_REDActionPerformed

    private void GREENActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GREENActionPerformed
        // TODO add your handling code here:
        
        BufferedImage gmb = null;
        File f = null;
        String Mpath = jLabel2.getText();
        try
        {
        f = new File(Mpath);
        gmb = ImageIO.read(f);
        }
        catch(IOException e){
            condition.setText("Tidak ada gambar");
            System.out.println("THERE'S NO PICTURE \n"
                    + "=================== \n" );
        }
        
        int width = gmb.getWidth();
        int Height = gmb.getHeight();

        for (int y = 0; y < Height; y++)
        {
            for  (int x = 0; x < width; x++)
            {
		int p = gmb.getRGB(x,y);
		
		int a = (p>>24)&0xff;//b
		int b =  p&0xff;      //g
		int g = (p>>8)&0xff; //r

		p = (a<<24) | (0<<16) | (g<<8) | 0;

		gmb.setRGB(x, y, p);	
	}
}
        NewBi = gmb;
        ImageIcon imageicon = new ImageIcon(gmb);

        jLabel1.setIcon(ResizeImage(imageicon));
    }//GEN-LAST:event_GREENActionPerformed

    private void BLUEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BLUEActionPerformed
        // TODO add your handling code here:
        BufferedImage gmb = null;
        File f = null;
        String Mpath = jLabel2.getText();
        try
        {
        f = new File(Mpath);
        gmb = ImageIO.read(f);
        }
        catch(IOException e){
            condition.setText("Tidak ada gambar");
            System.out.println("THERE'S NO PICTURE \n"
                    + "=================== \n" );
        }
        
        int width = gmb.getWidth();
        int Height = gmb.getHeight();

        for (int y = 0; y < Height; y++)
        {
            for  (int x = 0; x < width; x++)
            {
		int p = gmb.getRGB(x,y);
		
		int a = (p>>0)&0xff;       //b
		int b = (p>>0)&0xff;  //g
		int g = (p>>0)&0xff;   //r

		p = (a<<0) | (b<<0) | (g<<0) | 0;

		gmb.setRGB(x, y, p);	
	}
}
        NewBi = gmb;
        ImageIcon imageicon = new ImageIcon(gmb);

     //   gambar = new JLabel1(imageicon);
        jLabel1.setIcon(ResizeImage(imageicon));
    }//GEN-LAST:event_BLUEActionPerformed

    private void uploadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uploadActionPerformed
        // TODO add your handling code here:
        File fl = null;
        JFileChooser file = new JFileChooser();
    file.setCurrentDirectory(new File(System.getProperty("user.home")));
    //filter the files
    FileNameExtensionFilter filter = new FileNameExtensionFilter("*.Images", "jpg","gif","png");
    file.addChoosableFileFilter(filter);
    int result = file.showOpenDialog(null);
    //if the user click on save in Jfilechooser
    if(result == JFileChooser.APPROVE_OPTION){
    File selectedFile = file.getSelectedFile();
    String path = selectedFile.getAbsolutePath();
    jLabel2.setText(path);
    ImageIcon images = new ImageIcon(path);
    jLabel1.setIcon(ResizeImage(images));
    try{
      fl = new File(path);
    condition.setText("  ");
    OriginalBi = ImageIO.read(fl);
    NewBi = ImageIO.read(fl);
    }
    catch(IOException e){
            System.out.println("THERE'S A PROMBLEM \n"
                    + "=================== \n" + e);
        }
    }
    else if(result == JFileChooser.CANCEL_OPTION){
    System.out.println("No File Select");
    }//GEN-LAST:event_uploadActionPerformed
    }
    
    private void OriginalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OriginalActionPerformed
        
        if(null != OriginalBi){
        NewBi = OriginalBi;
        ImageIcon imageicon = new ImageIcon(OriginalBi);
        
        
    jLabel1.setIcon(ResizeImage(imageicon));
        }
        else{
            condition.setText("Tidak ada gambar");
        System.out.println("THERE'S NO PICTURE \n"
                    + "=================== \n" );
        }
    }//GEN-LAST:event_OriginalActionPerformed

    private void fActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fActionPerformed
        // TODO add your handling code here:
        if( null != NewBi){
        imageToArray();
        makeFilteredImage();
        saveFile();
        }
        else{
            condition.setText("Tidak ada gambar untuk di save");
        System.out.println("THERE'S NOTHING TO SAVE!");
        }
    }//GEN-LAST:event_fActionPerformed

    private void GayScaleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GayScaleActionPerformed
        // TODO add your handling code here:
        BufferedImage gmb = null;
        File f = null;
        
        String Mpath = jLabel2.getText();
        try
        {
        f = new File(Mpath);
        gmb = ImageIO.read(f);
        }
        catch(IOException e){
            condition.setText("Tidak ada gambar");
            System.out.println("THERE'S NO PICTURE \n"
                    + "=================== \n" );
        }
        
        int width = gmb.getWidth();
        int Height = gmb.getHeight();

        for (int y = 0; y < Height; y++)
        {
            for  (int x = 0; x < width; x++)
            {
		int p = gmb.getRGB(x,y);
		
		int a = (p>>24)&0xff;       //b
		int r = (p>>16)&0xff;  //g
		int g = (p>>8)&0xff;   //r
                int b = p&0xff;

		int avg = (r + g + b) / 3;
                
                p = (avg<<24) | (avg<<16) | (avg<<8) | avg;
                        
		gmb.setRGB(x, y, p);	
	}
}
        NewBi = gmb;
        ImageIcon imageicon = new ImageIcon(gmb);

        jLabel1.setIcon(ResizeImage(imageicon));
    }//GEN-LAST:event_GayScaleActionPerformed

    private void sharpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sharpenActionPerformed
        // TODO add your handling code here:ERROR
        
        BufferedImage image = NewBi;
        // A 3x3 kernel that sharpens an image
        Kernel kernel = new Kernel(3, 3,
                new float[]{
                    -1, -1, -1,
                    -1, 9, -1,
                    -1, -1, -1});
 
        BufferedImageOp op = new ConvolveOp(kernel);
        image = op.filter(image, null);
        NewBi = image;
        ImageIcon imageicon = new ImageIcon(image);

        jLabel1.setIcon(ResizeImage(imageicon));
    }//GEN-LAST:event_sharpenActionPerformed

    private void histo_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_histo_buttonActionPerformed
        // TODO add your handling code here: 
        Histogram histogram = new Histogram();
        histogram.display(NewBi);
        
    }//GEN-LAST:event_histo_buttonActionPerformed

    private void blurringActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_blurringActionPerformed
        // TODO add your handling code here:
        if (OriginalBi == null) {
        throw new IllegalArgumentException("tidak ada gambar");
    }
         
          BufferedImage gmb = null;
         
          gmb = NewBi;
        
          BufferedImage blurred = blur(gmb, filter, filterWidth);
          
          NewBi = blurred;
        ImageIcon imageicon = new ImageIcon(blurred);

     //   gambar = new JLabel1(imageicon);
        jLabel1.setIcon(ResizeImage(imageicon));
          
    }//GEN-LAST:event_blurringActionPerformed

    private void SaveAsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveAsActionPerformed
        // TODO add your handling code here:
               // TODO add your handling code here:
        if( null != NewBi){
        imageToArray();
        makeFilteredImage();
        saveFile();
        }
        else{
            condition.setText("Tidak ada gambar untuk di save");
        System.out.println("THERE'S NOTHING TO SAVE!");
        } 
    }//GEN-LAST:event_SaveAsActionPerformed

    private void NewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NewActionPerformed
        // TODO add your handling code here:
                File fl = null;
        JFileChooser file = new JFileChooser();
    file.setCurrentDirectory(new File(System.getProperty("user.home")));
    //filter the files
    FileNameExtensionFilter filter = new FileNameExtensionFilter("*.Images", "jpg","gif","png");
    file.addChoosableFileFilter(filter);
    int result = file.showOpenDialog(null);
    //if the user click on save in Jfilechooser
    if(result == JFileChooser.APPROVE_OPTION){
    File selectedFile = file.getSelectedFile();
    String path = selectedFile.getAbsolutePath();
    jLabel2.setText(path);
    ImageIcon images = new ImageIcon(path);
    jLabel1.setIcon(ResizeImage(images));
    try{
      fl = new File(path);
    condition.setText("  ");
    OriginalBi = ImageIO.read(fl);
    NewBi = ImageIO.read(fl);
    }
    catch(IOException e){
            System.out.println("THERE'S A PROMBLEM \n"
                    + "=================== \n" + e);
        }
    }
    else if(result == JFileChooser.CANCEL_OPTION){
    System.out.println("No File Select");
    }                                      
    

    }//GEN-LAST:event_NewActionPerformed
    
    
    private void imageToArray(){
        
        BufferedImage gmb = NewBi;
        
        int width = gmb.getWidth();
        int Height = gmb.getHeight();
        pixel = new int[width][Height];
        
        for(int i = 0; i < width; i++){
            for(int j = 0; j < Height; j++){
                pixel[i][j]=gmb.getRGB(i, j);
            }
        }
    }
    
    private void makeFilteredImage(){
    }
    
    public static BufferedImage blur(BufferedImage image, int[] filter, int filterWidth) {
    if (filter.length % filterWidth != 0) {
        throw new IllegalArgumentException("filter contains a incomplete row");
    }

    final int width = image.getWidth();
    final int height = image.getHeight();
    final int sum = IntStream.of(filter).sum();

    int[] input = image.getRGB(0, 0, width, height, null, 0, width);

    int[] output = new int[input.length];

    final int pixelIndexOffset = width - filterWidth;
    final int centerOffsetX = filterWidth / 2;
    final int centerOffsetY = filter.length / filterWidth / 2;

    // apply filter
    for (int h = height - filter.length / filterWidth + 1, w = width - filterWidth + 1, y = 0; y < h; y++) {
        for (int x = 0; x < w; x++) {
            int r = 0;
            int g = 0;
            int b = 0;
            for (int filterIndex = 0, pixelIndex = y * width + x;
                    filterIndex < filter.length;
                    pixelIndex += pixelIndexOffset) {
                for (int fx = 0; fx < filterWidth; fx++, pixelIndex++, filterIndex++) {
                    int col = input[pixelIndex];
                    int factor = filter[filterIndex];

                    // sum up color channels seperately
                    r += ((col >>> 16) & 0xFF) * factor;
                    g += ((col >>> 8) & 0xFF) * factor;
                    b += (col & 0xFF) * factor;
                }
            }
            r /= sum;
            g /= sum;
            b /= sum;
            // combine channels with full opacity
            output[x + centerOffsetX + (y + centerOffsetY) * width] = (r << 16) | (g << 8) | b | 0xFF000000;
        }
    }

    BufferedImage result = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);
    result.setRGB(0, 0, width, height, output, 0, width);
    return result;
}
    
   private void saveFile(){
       
           JFileChooser file = new JFileChooser();
    file.setCurrentDirectory(new File(System.getProperty("user.home")));
    //filter the files
    FileNameExtensionFilter filter = new FileNameExtensionFilter("*.Images", "jpg","gif","png");
    file.addChoosableFileFilter(filter);
    int result = file.showSaveDialog(null);
    //if the user click on save in Jfilechooser
    if(result == JFileChooser.APPROVE_OPTION){
        try{
        ImageIO.write(NewBi,"png",file.getSelectedFile());
    condition.setText("Image has been saved");
    System.out.println("success to save image file");
    }
        catch(IOException ioe){
        System.out.println("failed to save image file");
        }
    }
    else if(result == JFileChooser.CANCEL_OPTION){
    System.out.println("No File Select");
    }
    }
   
       public ImageIcon ResizeImage(ImageIcon MyImage)
{
//ImageIcon MyImage = new ImageIcon(ImagePath);
Image img = MyImage.getImage();
Image newImg = img.getScaledInstance(jLabel1.getWidth(), jLabel1.getHeight(), Image.SCALE_SMOOTH);
ImageIcon image = new ImageIcon(newImg);
return image;
}
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FOTORGB.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FOTORGB.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FOTORGB.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FOTORGB.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FOTORGB().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BLUE;
    private javax.swing.JButton GREEN;
    private javax.swing.JButton GayScale;
    private javax.swing.JMenuItem New;
    private javax.swing.JButton Original;
    private javax.swing.JButton RED;
    private javax.swing.JMenu Save;
    private javax.swing.JMenuItem SaveAs;
    private javax.swing.JButton blurring;
    private javax.swing.JLabel condition;
    private javax.swing.JButton f;
    private javax.swing.JButton histo_button;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JButton sharpen;
    private javax.swing.JButton upload;
    // End of variables declaration//GEN-END:variables
}


